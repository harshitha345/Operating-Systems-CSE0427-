#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<unistd.h>
#include<semaphore.h>
#define N 5
enum{THINKING,HUNGRY,EATING}
state[n];
sem_t forks[N];
sem_t mutex;
void*philosopher(void*arg){
	int id=*(int*)arg;;
	while(1){
		printf("philosopher %d is thinking...\n",id);
		sleep(rand()%5);
		sem_wait(&mutex);
		state[id]=hungry;
		printf("philosopher %d is hungry and trying to grab forks...\n",id);
		if(state[(id+4)%N]!EATING&&state[(id+1)%N!=EATING])
		sem_post(&forks[id]);
		printf("philosopher %d grabbed forks and is now eating.\n",id);
	} else{
		sem_post(&mutex);
	}
	sem_wait(&forks[id]);
	print("philosopher %d is done eating and releasing forks.\n",id);
	state[id]=THINKING;
	sem_post(&mutex);
	sleep(rand()%5);
}
}int main(){
	pthread_t tid[N];
	int ids[N];
	int i;
	srand(time(NULL));
	sem_init(&mutex,0,1);
	for(i=;i<n;i++){
		sem_init(&forks[i],0,1);
		state[i]=THINKING;
		ids[i]=i;
	}
	for(i=0;i<N;i++){
	pthreads_create(&tid[i],NULL,philosopher,&ids[i]);
}
for(i=0;i<N;i++){
	sem_destroy(&forks[i]);
}