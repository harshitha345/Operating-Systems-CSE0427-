#include <stdio.h>

struct Process {
    char process_id[3];
    int burst_time;
    int priority;
    int waiting_time;
    int turnaround_time;
};

void priority_scheduling(struct Process processes[], int n) {
    // Sort processes based on priority (lower values have higher priority)
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].priority > processes[j + 1].priority) {
                struct Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }

    // Calculate waiting time for each process
    int total_waiting_time = 0;
    for (int i = 0; i < n; i++) {
        if (i > 0) {
            processes[i].waiting_time = processes[i - 1].waiting_time + processes[i - 1].burst_time;
        }
        total_waiting_time += processes[i].waiting_time;
    }

    // Calculate turnaround time for each process
    int total_turnaround_time = 0;
    for (int i = 0; i < n; i++) {
        processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    // Calculate average waiting time and average turnaround time
    float average_waiting_time = (float)total_waiting_time / n;
    float average_turnaround_time = (float)total_turnaround_time / n;

    // Print the results
    printf("Average Waiting Time: %.2f\n", average_waiting_time);
    printf("Average Turnaround Time: %.2f\n", average_turnaround_time);
}

int main() {
    struct Process processes[3] = {
        {"P1", 30, 2, 0, 0},
        {"P2", 5, 1, 0, 0},
        {"P3", 12, 3, 0, 0}
    };

    int n = sizeof(processes) / sizeof(processes[0]);

    // Calculate average waiting time and average turnaround time
    priority_scheduling(processes, n);
return 0;
}